# FreelanceHub Frontend UI Development Prompts

## Overview
This document contains comprehensive UI prompts for creating a modern freelance platform frontend with React/Next.js. The prompts are categorized by user roles and include corresponding backend API curl commands for implementation.

---

## 1. PUBLIC PAGES (No Authentication Required)

### 1.1 Landing Page
**Prompt:**
Create a modern, responsive landing page for FreelanceHub with the following sections:
- Hero section with compelling value proposition and CTA buttons for "Hire Freelancers" and "Find Work"
- Features showcase highlighting platform benefits
- How it works section (3-step process for both clients and freelancers)
- Popular categories/skills grid
- Success stories/testimonials carousel
- Statistics counter (total projects, freelancers, clients)
- Pricing/subscription plans preview
- Footer with links to all pages

**Design Requirements:**
- Modern gradient backgrounds
- Smooth scrolling animations
- Mobile-first responsive design
- Dark/light theme toggle
- Loading states and micro-interactions

**Curl Commands:**
```bash
# Get platform statistics for landing page
curl -X GET "http://localhost:3000/v1/public/stats" \
  -H "Content-Type: application/json"

# Response:
{
  "success": true,
  "data": {
    "totalProjects": 12450,
    "totalFreelancers": 8320,
    "totalClients": 4130,
    "totalEarnings": 2450000,
    "projectsCompleted": 9876,
    "averageRating": 4.8
  }
}

# Get popular categories
curl -X GET "http://localhost:3000/v1/public/categories" \
  -H "Content-Type: application/json"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "web-development",
      "name": "Web Development",
      "description": "Frontend and backend web development",
      "icon": "code",
      "projectCount": 3450,
      "featured": true
    },
    {
      "id": "mobile-development",
      "name": "Mobile Development",
      "description": "iOS and Android app development",
      "icon": "mobile",
      "projectCount": 1280,
      "featured": true
    }
  ]
}

# Get featured testimonials
curl -X GET "http://localhost:3000/v1/public/testimonials" \
  -H "Content-Type: application/json"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "test-1",
      "clientName": "Sarah Johnson",
      "clientCompany": "TechCorp Inc.",
      "rating": 5,
      "comment": "Exceptional work quality and communication. Delivered ahead of schedule!",
      "projectType": "Web Development",
      "featured": true
    },
    {
      "id": "test-2",
      "freelancerName": "Mike Chen",
      "rating": 5,
      "comment": "Great platform to find quality projects. Professional client interactions.",
      "projectType": "Mobile Development",
      "featured": true
    }
  ]
}
```

### 1.2 Browse Projects Page (Public)
**Prompt:**
Create a public projects browsing page where visitors can explore available projects:
- Advanced search and filtering system (category, budget range, project type, location)
- Project cards showing title, description, budget, client rating, proposals count
- Pagination or infinite scroll
- Sort options (newest, budget high-to-low, etc.)
- Map view toggle for location-based projects
- Login prompt overlay for detailed view

**Curl Commands:**
```bash
# Browse public projects with filters
curl -X GET "http://localhost:3000/v1/projects/public?page=1&limit=12&category=web-development&minBudget=100&maxBudget=5000&projectType=fixed" \
  -H "Content-Type: application/json"

# Response:
{
  "success": true,
  "data": {
    "projects": [
      {
        "id": "proj-123",
        "title": "E-commerce Website Development",
        "description": "Need a modern e-commerce website with payment integration...",
        "category": "web-development",
        "budget": {
          "type": "fixed",
          "amount": 2500,
          "currency": "USD"
        },
        "skills": ["React", "Node.js", "MongoDB"],
        "clientRating": 4.8,
        "proposalsCount": 12,
        "postedAt": "2024-01-15T10:30:00Z",
        "deadline": "2024-02-15T23:59:59Z",
        "client": {
          "name": "John Smith",
          "location": "New York, USA",
          "verified": true
        }
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 12,
      "total": 156,
      "totalPages": 13
    }
  }
}

# Get project categories for filters
curl -X GET "http://localhost:3000/v1/projects/categories" \
  -H "Content-Type: application/json"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "web-development",
      "name": "Web Development",
      "count": 450
    },
    {
      "id": "mobile-development",
      "name": "Mobile Development", 
      "count": 230
    },
    {
      "id": "design",
      "name": "Design & Creative",
      "count": 180
    }
  ]
}
```

### 1.3 Browse Freelancers Page (Public)
**Prompt:**
Create a freelancer directory page for browsing talent:
- Freelancer profile cards with photo, name, skills, rating, hourly rate
- Skill-based filtering and search
- Location and availability filters
- Portfolio preview in cards
- "View Full Profile" that prompts login for guests
- Featured freelancers section

**Curl Commands:**
```bash
# Browse freelancers publicly
curl -X GET "http://localhost:3000/v1/freelancers/public?page=1&limit=12&skills=react,nodejs&location=colombo&minRate=10&maxRate=100" \
  -H "Content-Type: application/json"

# Response:
{
  "success": true,
  "data": {
    "freelancers": [
      {
        "id": "freelancer-123",
        "firstName": "Alice",
        "lastName": "Johnson",
        "username": "alice_dev",
        "profilePhoto": "https://example.com/photos/alice.jpg",
        "title": "Full Stack Developer",
        "skills": ["React", "Node.js", "MongoDB", "TypeScript"],
        "hourlyRate": {
          "amount": 45,
          "currency": "USD"
        },
        "rating": 4.9,
        "reviewsCount": 127,
        "location": {
          "city": "Colombo",
          "country": "Sri Lanka"
        },
        "availability": "available",
        "portfolio": [
          {
            "title": "E-commerce Platform",
            "image": "https://example.com/portfolio/ecommerce.jpg"
          }
        ],
        "verified": true,
        "completedProjects": 89
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 12,
      "total": 245,
      "totalPages": 21
    }
  }
}

# Get skills list for filtering
curl -X GET "http://localhost:3000/v1/skills" \
  -H "Content-Type: application/json"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "react",
      "name": "React",
      "category": "frontend",
      "popularity": 95
    },
    {
      "id": "nodejs",
      "name": "Node.js",
      "category": "backend",
      "popularity": 88
    },
    {
      "id": "python",
      "name": "Python",
      "category": "backend",
      "popularity": 92
    }
  ]
}
```

---

## 2. AUTHENTICATION PAGES

### 2.1 Login Page
**Prompt:**
Create a modern login page with dual authentication methods:
- Traditional email/password form with validation
- WebAuthn/Passkey authentication option
- Social login buttons (Google, LinkedIn, GitHub)
- "Remember me" checkbox
- Forgot password link
- Switch to register form
- Loading states and error handling

**Design Requirements:**
- Split-screen layout with illustration
- Form validation with real-time feedback
- Accessibility compliant
- Progressive enhancement for WebAuthn

**Curl Commands:**
```bash
# Traditional login
curl -X POST "http://localhost:3000/v1/auth/login" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com",
    "password": "SecurePass123!"
  }'

# Response:
{
  "success": true,
  "data": {
    "user": {
      "id": "user-123",
      "email": "user@example.com",
      "username": "johndoe",
      "firstName": "John",
      "lastName": "Doe",
      "primaryRole": "freelancer",
      "verified": true,
      "profileComplete": true
    },
    "tokens": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "refreshToken": "refresh_token_here",
      "expiresIn": 3600
    }
  }
}

# Get WebAuthn challenge for login
curl -X POST "http://localhost:3000/v1/auth/login/challenge" \
  -H "Content-Type: application/json" \
  -d '{
    "identifier": "user@example.com"
  }'

# Response:
{
  "success": true,
  "data": {
    "challenge": "random_challenge_string",
    "allowCredentials": [
      {
        "id": "credential_id_base64",
        "type": "public-key"
      }
    ],
    "timeout": 60000
  }
}

# Verify WebAuthn login
curl -X POST "http://localhost:3000/v1/auth/login/verify" \
  -H "Content-Type: application/json" \
  -d '{
    "identifier": "user@example.com",
    "authenticationResponse": {WebAuthn_response_object},
    "challenge": "challenge_string"
  }'

# Response:
{
  "success": true,
  "data": {
    "user": {
      "id": "user-123",
      "email": "user@example.com",
      "username": "johndoe",
      "firstName": "John",
      "lastName": "Doe",
      "primaryRole": "freelancer",
      "verified": true
    },
    "tokens": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "refreshToken": "refresh_token_here",
      "expiresIn": 3600
    }
  }
}
```

### 2.2 Registration Page
**Prompt:**
Create a comprehensive registration page with role selection:
- Role selection (Freelancer/Client) with visual cards
- Multi-step form with progress indicator
- Step 1: Basic info (email, username, password, name)
- Step 2: Profile details (phone, location, bio)
- Step 3: Role-specific information (skills for freelancers, company for clients)
- Step 4: Email verification
- Terms acceptance and privacy policy
- Form validation and error handling

**Curl Commands:**
```bash
# Register new user
curl -X POST "http://localhost:3000/v1/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "newuser@example.com",
    "username": "newuser123",
    "firstName": "John",
    "lastName": "Doe",
    "primaryRole": "freelancer",
    "password": "SecurePass123!",
    "phone": "+94701234567",
    "location": {
      "country": "Sri Lanka",
      "city": "Colombo"
    }
  }'

# Response:
{
  "success": true,
  "message": "Registration successful. Please verify your email.",
  "data": {
    "user": {
      "id": "user-456",
      "email": "newuser@example.com",
      "username": "newuser123",
      "firstName": "John",
      "lastName": "Doe",
      "primaryRole": "freelancer",
      "verified": false,
      "createdAt": "2024-01-15T10:30:00Z"
    },
    "verificationRequired": true
  }
}

# Verify email
curl -X POST "http://localhost:3000/v1/auth/verify-email" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "newuser@example.com",
    "token": "verification_token"
  }'

# Response:
{
  "success": true,
  "message": "Email verified successfully",
  "data": {
    "verified": true,
    "tokens": {
      "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
      "refreshToken": "refresh_token_here",
      "expiresIn": 3600
    }
  }
}

# Send email OTP
curl -X POST "http://localhost:3000/v1/auth/send-email-otp" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "newuser@example.com",
    "type": "verification"
  }'

# Response:
{
  "success": true,
  "message": "OTP sent successfully",
  "data": {
    "otpSent": true,
    "expiresIn": 300,
    "canResendAfter": 60
  }
}
```

### 2.3 Password Reset Flow
**Prompt:**
Create password reset flow with modern UX:
- Forgot password form with email input
- Email sent confirmation page
- Reset password form with token validation
- Success confirmation page
- Strong password requirements indicator
- Resend email option

**Curl Commands:**
```bash
# Request password reset
curl -X POST "http://localhost:3000/v1/auth/forgot-password" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com"
  }'

# Response:
{
  "success": true,
  "message": "Password reset OTP sent to your email",
  "data": {
    "otpSent": true,
    "expiresIn": 600,
    "canResendAfter": 120
  }
}

# Reset password with OTP
curl -X POST "http://localhost:3000/v1/auth/reset-password" \
  -H "Content-Type: application/json" \
  -d '{
    "email": "user@example.com",
    "otp": "123456",
    "newPassword": "NewSecurePass123!"
  }'

# Response:
{
  "success": true,
  "message": "Password reset successfully",
  "data": {
    "passwordReset": true,
    "loginRequired": true
  }
}
```

---

## 3. FREELANCER DASHBOARD & PAGES

### 3.1 Freelancer Dashboard
**Prompt:**
Create a comprehensive freelancer dashboard with:
- Quick stats cards (active projects, pending proposals, earnings, profile views)
- Recent activity feed
- Upcoming deadlines and milestones
- Quick actions (browse projects, send proposal, message client)
- Earnings chart (daily/weekly/monthly view)
- Recent messages preview
- Project status overview
- Profile completion progress

**Curl Commands:**
```bash
# Get freelancer dashboard data
curl -X GET "http://localhost:3000/v1/freelancer/dashboard" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "stats": {
      "activeProjects": 3,
      "pendingProposals": 8,
      "totalEarnings": 15750,
      "profileViews": 234,
      "completedProjects": 12,
      "averageRating": 4.8
    },
    "recentActivity": [
      {
        "id": "activity-1",
        "type": "proposal_accepted",
        "message": "Your proposal for 'E-commerce Website' was accepted",
        "timestamp": "2024-01-15T09:30:00Z",
        "projectId": "proj-123"
      }
    ],
    "upcomingDeadlines": [
      {
        "projectId": "proj-123",
        "projectTitle": "E-commerce Website",
        "deadline": "2024-01-20T23:59:59Z",
        "daysLeft": 5
      }
    ],
    "recentMessages": [
      {
        "id": "msg-1",
        "senderName": "John Client",
        "preview": "Hi, I wanted to discuss the project timeline...",
        "timestamp": "2024-01-15T08:45:00Z",
        "unread": true
      }
    ]
  }
}

# Get freelancer statistics
curl -X GET "http://localhost:3000/v1/freelancer/stats" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "earnings": {
      "total": 15750,
      "thisMonth": 3200,
      "lastMonth": 4500,
      "growthPercentage": -28.9
    },
    "projects": {
      "total": 15,
      "active": 3,
      "completed": 12
    },
    "proposals": {
      "sent": 45,
      "accepted": 15,
      "successRate": 33.3
    },
    "rating": {
      "average": 4.8,
      "totalReviews": 12
    }
  }
}

# Get recent activity
curl -X GET "http://localhost:3000/v1/freelancer/activity?limit=10" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "activity-1",
      "type": "proposal_submitted",
      "message": "You submitted a proposal for 'Mobile App Development'",
      "timestamp": "2024-01-15T10:15:00Z",
      "metadata": {
        "projectId": "proj-456",
        "projectTitle": "Mobile App Development"
      }
    },
    {
      "id": "activity-2", 
      "type": "milestone_completed",
      "message": "Milestone 2 completed for 'E-commerce Website'",
      "timestamp": "2024-01-14T16:30:00Z",
      "metadata": {
        "projectId": "proj-123",
        "milestoneId": "milestone-2"
      }
    }
  ]
}
```

### 3.2 Browse Projects (Freelancer View)
**Prompt:**
Create advanced project browsing for freelancers:
- Enhanced search with saved filters
- Project recommendation algorithm results
- Detailed project cards with client info, requirements, budget
- Proposal submission directly from browse page
- Bookmark/save projects for later
- Application tracking (applied, shortlisted, rejected)
- Skills matching indicator

**Curl Commands:**
```bash
# Browse projects as freelancer
curl -X GET "http://localhost:3000/v1/projects?page=1&limit=20&category=development&minBudget=500" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "projects": [
      {
        "id": "proj-789",
        "title": "React Dashboard Development",
        "description": "Looking for an experienced React developer to build a complex dashboard...",
        "category": "web-development",
        "skills": ["React", "TypeScript", "D3.js"],
        "budget": {
          "type": "fixed",
          "amount": 3500,
          "currency": "USD"
        },
        "timeline": {
          "duration": 45,
          "unit": "days"
        },
        "client": {
          "id": "client-123",
          "name": "Tech Startup",
          "rating": 4.7,
          "reviewsCount": 23,
          "location": "San Francisco, USA",
          "verified": true,
          "memberSince": "2023-03-15"
        },
        "postedAt": "2024-01-10T14:20:00Z",
        "proposalsCount": 8,
        "skillsMatch": 85,
        "applied": false,
        "bookmarked": false
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 156,
      "totalPages": 8
    },
    "filters": {
      "applied": {
        "category": "development",
        "minBudget": 500
      }
    }
  }
}

# Get recommended projects
curl -X GET "http://localhost:3000/v1/projects/recommended" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "proj-recommended-1",
      "title": "Node.js API Development",
      "matchScore": 92,
      "reasonsForRecommendation": [
        "Skills match: Node.js, MongoDB",
        "Similar budget range to your previous projects",
        "Client has high rating"
      ],
      "budget": {
        "type": "fixed",
        "amount": 2800,
        "currency": "USD"
      },
      "skills": ["Node.js", "MongoDB", "REST API"],
      "postedAt": "2024-01-12T11:15:00Z"
    }
  ]
}

# Save/bookmark project
curl -X POST "http://localhost:3000/v1/projects/{projectId}/bookmark" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "message": "Project bookmarked successfully",
  "data": {
    "bookmarked": true
  }
}
```

### 3.3 Proposal Management
**Prompt:**
Create proposal management system:
- Proposal creation form with cover letter, pricing, timeline
- Template library for quick proposals
- Proposal tracking dashboard (sent, viewed, shortlisted, accepted, rejected)
- Edit/withdraw proposals
- Proposal analytics (view rate, response rate)
- Follow-up reminders

**Curl Commands:**
```bash
# Submit proposal
curl -X POST "http://localhost:3000/v1/projects/{projectId}/proposals" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "coverLetter": "I am excited to work on this project...",
    "pricing": {
      "amount": 1500,
      "currency": "USD"
    },
    "deliveryDays": 21,
    "attachments": []
  }'

# Response:
{
  "success": true,
  "message": "Proposal submitted successfully",
  "data": {
    "proposal": {
      "id": "proposal-456",
      "projectId": "proj-123",
      "freelancerId": "freelancer-789",
      "coverLetter": "I am excited to work on this project...",
      "pricing": {
        "amount": 1500,
        "currency": "USD"
      },
      "deliveryDays": 21,
      "status": "submitted",
      "submittedAt": "2024-01-15T10:30:00Z"
    }
  }
}

# Get freelancer proposals
curl -X GET "http://localhost:3000/v1/freelancer/proposals?status=active&page=1" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "proposals": [
      {
        "id": "proposal-456",
        "project": {
          "id": "proj-123",
          "title": "E-commerce Website Development",
          "client": {
            "name": "Tech Company",
            "rating": 4.8
          }
        },
        "pricing": {
          "amount": 1500,
          "currency": "USD"
        },
        "status": "submitted",
        "submittedAt": "2024-01-15T10:30:00Z",
        "viewedByClient": true,
        "clientLastSeen": "2024-01-15T14:20:00Z"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 10,
      "total": 8,
      "totalPages": 1
    },
    "summary": {
      "total": 8,
      "submitted": 3,
      "shortlisted": 2,
      "accepted": 1,
      "rejected": 2
    }
  }
}

# Update proposal
curl -X PUT "http://localhost:3000/v1/proposals/{proposalId}" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "coverLetter": "Updated proposal content...",
    "pricing": {
      "amount": 1800,
      "currency": "USD"
    }
  }'

# Response:
{
  "success": true,
  "message": "Proposal updated successfully",
  "data": {
    "proposal": {
      "id": "proposal-456",
      "coverLetter": "Updated proposal content...",
      "pricing": {
        "amount": 1800,
        "currency": "USD"
      },
      "updatedAt": "2024-01-15T11:45:00Z"
    }
  }
}
```

### 3.4 Active Projects Management
**Prompt:**
Create project management interface for freelancers:
- Active projects overview with progress bars
- Project details with client communication
- Milestone tracking and submission
- Time tracking with start/stop timer
- File sharing and collaboration tools
- Project timeline and deadlines
- Contract details and scope

**Curl Commands:**
```bash
# Get active projects
curl -X GET "http://localhost:3000/v1/freelancer/projects/active" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "proj-active-1",
      "title": "E-commerce Website Development",
      "client": {
        "id": "client-123",
        "name": "Tech Startup Inc.",
        "rating": 4.8,
        "profilePhoto": "https://example.com/photos/client.jpg"
      },
      "status": "in_progress",
      "progress": {
        "percentage": 65,
        "milestonesCompleted": 2,
        "totalMilestones": 4
      },
      "budget": {
        "amount": 3500,
        "currency": "USD"
      },
      "timeline": {
        "startDate": "2024-01-01T00:00:00Z",
        "deadline": "2024-02-15T23:59:59Z",
        "daysRemaining": 12
      },
      "nextMilestone": {
        "id": "milestone-3",
        "title": "Backend API Development",
        "dueDate": "2024-01-25T23:59:59Z",
        "amount": 1000
      }
    }
  ]
}

# Update project progress
curl -X PUT "http://localhost:3000/v1/projects/{projectId}/progress" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "status": "in_progress",
    "progressPercentage": 65,
    "notes": "Completed design phase, starting development"
  }'

# Response:
{
  "success": true,
  "message": "Project progress updated successfully",
  "data": {
    "project": {
      "id": "proj-123",
      "status": "in_progress",
      "progressPercentage": 65,
      "lastUpdated": "2024-01-15T10:30:00Z",
      "notes": "Completed design phase, starting development"
    }
  }
}

# Submit milestone
curl -X POST "http://localhost:3000/v1/projects/{projectId}/milestones/{milestoneId}/submit" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "deliverables": [],
    "description": "Milestone completed as per requirements"
  }'

# Response:
{
  "success": true,
  "message": "Milestone submitted for review",
  "data": {
    "milestone": {
      "id": "milestone-2",
      "status": "submitted",
      "submittedAt": "2024-01-15T10:30:00Z",
      "description": "Milestone completed as per requirements",
      "amount": 875,
      "reviewDeadline": "2024-01-18T23:59:59Z"
    }
  }
}
```

### 3.5 Freelancer Profile Management
**Prompt:**
Create comprehensive profile management:
- Profile overview with photo, bio, skills, rates
- Portfolio section with project showcases
- Experience and education sections
- Skills assessment and certifications
- Availability calendar
- Profile visibility settings
- SEO optimization for profile discovery

**Curl Commands:**
```bash
# Get freelancer profile
curl -X GET "http://localhost:3000/v1/auth/me" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "user": {
      "id": "user-123",
      "email": "freelancer@example.com",
      "username": "johndev",
      "firstName": "John",
      "lastName": "Developer",
      "primaryRole": "freelancer",
      "profilePhoto": "https://example.com/photos/john.jpg",
      "phone": "+94701234567",
      "location": {
        "country": "Sri Lanka",
        "city": "Colombo"
      },
      "bio": "Experienced full-stack developer with 5+ years of experience...",
      "skills": ["React", "Node.js", "MongoDB", "TypeScript"],
      "hourlyRate": {
        "amount": 50,
        "currency": "USD"
      },
      "availability": "full_time",
      "rating": 4.8,
      "reviewsCount": 45,
      "completedProjects": 67,
      "memberSince": "2022-03-15T00:00:00Z",
      "verified": true,
      "profileComplete": 95
    }
  }
}

# Update freelancer profile
curl -X PUT "http://localhost:3000/v1/freelancer/profile" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "bio": "Experienced full-stack developer...",
    "hourlyRate": {
      "amount": 50,
      "currency": "USD"
    },
    "skills": ["React", "Node.js", "MongoDB"],
    "availability": "full_time"
  }'

# Response:
{
  "success": true,
  "message": "Profile updated successfully",
  "data": {
    "profile": {
      "bio": "Experienced full-stack developer...",
      "hourlyRate": {
        "amount": 50,
        "currency": "USD"
      },
      "skills": ["React", "Node.js", "MongoDB"],
      "availability": "full_time",
      "updatedAt": "2024-01-15T10:30:00Z",
      "profileComplete": 98
    }
  }
}

# Upload portfolio item
curl -X POST "http://localhost:3000/v1/freelancer/portfolio" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: multipart/form-data" \
  -F "title=E-commerce Website" \
  -F "description=Modern e-commerce platform" \
  -F "images=@screenshot1.jpg" \
  -F "technologies=[\"React\", \"Node.js\"]"

# Response:
{
  "success": true,
  "message": "Portfolio item added successfully",
  "data": {
    "portfolioItem": {
      "id": "portfolio-123",
      "title": "E-commerce Website",
      "description": "Modern e-commerce platform",
      "technologies": ["React", "Node.js"],
      "images": [
        {
          "id": "img-1",
          "url": "https://example.com/portfolio/screenshot1.jpg",
          "filename": "screenshot1.jpg"
        }
      ],
      "createdAt": "2024-01-15T10:30:00Z",
      "featured": false
    }
  }
}
```

### 3.6 Earnings & Financial Dashboard
**Prompt:**
Create financial management dashboard:
- Earnings overview (daily, weekly, monthly, yearly)
- Payment history with detailed transactions
- Pending payments and invoices
- Tax document generation
- Earnings analytics with charts
- Withdrawal/payout management
- Financial goal tracking

**Curl Commands:**
```bash
# Get earnings overview
curl -X GET "http://localhost:3000/v1/freelancer/earnings?period=monthly&year=2024" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "summary": {
      "totalEarnings": 45750,
      "currentMonth": 3200,
      "lastMonth": 4800,
      "yearToDate": 28950,
      "growthPercentage": -33.3,
      "currency": "USD"
    },
    "monthlyBreakdown": [
      {
        "month": "2024-01",
        "earnings": 3200,
        "projectsCompleted": 2,
        "hoursWorked": 64
      },
      {
        "month": "2023-12",
        "earnings": 4800,
        "projectsCompleted": 3,
        "hoursWorked": 96
      }
    ],
    "topClients": [
      {
        "clientId": "client-123",
        "clientName": "Tech Corp",
        "totalEarnings": 8500,
        "projectsCount": 4
      }
    ]
  }
}

# Get payment history
curl -X GET "http://localhost:3000/v1/freelancer/payments?page=1&limit=20" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "payments": [
      {
        "id": "payment-456",
        "projectId": "proj-123",
        "projectTitle": "E-commerce Website",
        "clientName": "Tech Startup",
        "amount": 1250,
        "currency": "USD",
        "type": "milestone",
        "status": "completed",
        "paidAt": "2024-01-10T14:30:00Z",
        "fee": 75,
        "netAmount": 1175
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 34,
      "totalPages": 2
    },
    "summary": {
      "totalReceived": 45750,
      "pending": 2400,
      "totalFees": 2750
    }
  }
}

# Request payout
curl -X POST "http://localhost:3000/v1/freelancer/payout" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "amount": 1500,
    "paymentMethod": "bank_transfer"
  }'

# Response:
{
  "success": true,
  "message": "Payout request submitted successfully",
  "data": {
    "payout": {
      "id": "payout-789",
      "amount": 1500,
      "currency": "USD",
      "paymentMethod": "bank_transfer",
      "status": "pending",
      "requestedAt": "2024-01-15T10:30:00Z",
      "estimatedProcessingTime": "2-3 business days",
      "fee": 25,
      "netAmount": 1475
    }
  }
}
```

---

## 4. CLIENT DASHBOARD & PAGES

### 4.1 Client Dashboard
**Prompt:**
Create client-focused dashboard with:
- Active projects overview with status indicators
- Recent freelancer applications
- Budget tracking and spending analytics
- Quick post project button
- Favorite freelancers list
- Upcoming project deadlines
- Team collaboration overview
- Project performance metrics

**Curl Commands:**
```bash
# Get client dashboard
curl -X GET "http://localhost:3000/v1/client/dashboard" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "stats": {
      "activeProjects": 5,
      "totalProjects": 23,
      "totalSpent": 67500,
      "avgProjectRating": 4.7,
      "pendingApplications": 12,
      "savedFreelancers": 8
    },
    "activeProjects": [
      {
        "id": "proj-client-1",
        "title": "Mobile App Development",
        "freelancer": {
          "name": "Sarah Developer",
          "profilePhoto": "https://example.com/photos/sarah.jpg",
          "rating": 4.9
        },
        "progress": 75,
        "budget": 8500,
        "deadline": "2024-02-01T23:59:59Z",
        "status": "in_progress"
      }
    ],
    "recentApplications": [
      {
        "id": "proposal-789",
        "freelancer": {
          "name": "Mike Frontend",
          "rating": 4.8,
          "hourlyRate": 45
        },
        "projectTitle": "React Dashboard",
        "appliedAt": "2024-01-14T16:20:00Z",
        "coverLetterPreview": "I have extensive experience in React..."
      }
    ],
    "upcomingDeadlines": [
      {
        "projectId": "proj-123",
        "title": "Website Redesign",
        "deadline": "2024-01-20T23:59:59Z",
        "daysLeft": 5
      }
    ]
  }
}

# Get client statistics
curl -X GET "http://localhost:3000/v1/client/stats" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "spending": {
      "total": 67500,
      "thisMonth": 12000,
      "lastMonth": 8500,
      "growthPercentage": 41.2,
      "currency": "USD"
    },
    "projects": {
      "total": 23,
      "active": 5,
      "completed": 18,
      "successRate": 95.7
    },
    "freelancers": {
      "totalHired": 31,
      "favorites": 8,
      "avgRatingGiven": 4.6
    },
    "savings": {
      "estimatedSavings": 15400,
      "comparedToTraditional": 22.8
    }
  }
}

# Get recent applications
curl -X GET "http://localhost:3000/v1/client/recent-applications?limit=10" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "proposal-890",
      "project": {
        "id": "proj-456",
        "title": "E-commerce Platform"
      },
      "freelancer": {
        "id": "freelancer-789",
        "firstName": "Alice",
        "lastName": "Johnson",
        "username": "alice_dev",
        "profilePhoto": "https://example.com/photos/alice.jpg",
        "rating": 4.9,
        "reviewsCount": 87,
        "skills": ["React", "Node.js", "MongoDB"]
      },
      "proposal": {
        "pricing": {
          "amount": 4500,
          "currency": "USD"
        },
        "deliveryDays": 30,
        "coverLetterPreview": "I'm excited to work on your e-commerce platform...",
        "attachments": 2
      },
      "appliedAt": "2024-01-15T09:15:00Z",
      "viewed": false
    }
  ]
}
```

### 4.2 Post Project
**Prompt:**
Create intuitive project posting wizard:
- Multi-step project creation form
- Step 1: Project basics (title, category, description)
- Step 2: Requirements and skills needed
- Step 3: Budget and timeline
- Step 4: Additional preferences (location, freelancer level)
- Step 5: Review and publish
- Template library for common project types
- AI-powered description assistance

**Curl Commands:**
```bash
# Create new project
curl -X POST "http://localhost:3000/v1/projects" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "title": "E-commerce Website Development",
    "description": "Need a modern e-commerce website...",
    "category": "web_development",
    "skills": ["React", "Node.js", "MongoDB"],
    "budget": {
      "type": "fixed",
      "amount": 5000,
      "currency": "USD"
    },
    "timeline": {
      "duration": 30,
      "unit": "days"
    },
    "projectType": "fixed"
  }'

# Response:
{
  "success": true,
  "message": "Project created successfully",
  "data": {
    "project": {
      "id": "proj-new-123",
      "title": "E-commerce Website Development",
      "description": "Need a modern e-commerce website...",
      "category": "web_development",
      "skills": ["React", "Node.js", "MongoDB"],
      "budget": {
        "type": "fixed",
        "amount": 5000,
        "currency": "USD"
      },
      "timeline": {
        "duration": 30,
        "unit": "days"
      },
      "status": "active",
      "createdAt": "2024-01-15T10:30:00Z",
      "clientId": "client-456",
      "proposalsCount": 0
    }
  }
}

# Get project templates
curl -X GET "http://localhost:3000/v1/projects/templates?category=web_development" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": [
    {
      "id": "template-web-1",
      "title": "E-commerce Website",
      "description": "Complete e-commerce solution with shopping cart, payment integration, and admin panel",
      "category": "web_development",
      "suggestedSkills": ["React", "Node.js", "MongoDB", "Stripe"],
      "estimatedBudget": {
        "min": 3000,
        "max": 8000,
        "currency": "USD"
      },
      "estimatedDuration": {
        "min": 30,
        "max": 60,
        "unit": "days"
      },
      "popularity": 95
    },
    {
      "id": "template-web-2",
      "title": "Business Website",
      "description": "Professional business website with CMS, contact forms, and SEO optimization",
      "category": "web_development",
      "suggestedSkills": ["HTML", "CSS", "JavaScript", "WordPress"],
      "estimatedBudget": {
        "min": 1000,
        "max": 3000,
        "currency": "USD"
      },
      "estimatedDuration": {
        "min": 14,
        "max": 30,
        "unit": "days"
      },
      "popularity": 87
    }
  ]
}
```

### 4.3 Manage Projects
**Prompt:**
Create project management interface for clients:
- Projects overview (active, completed, draft)
- Project details with freelancer information
- Proposal review and management
- Milestone approval system
- Communication hub with freelancers
- Project timeline and progress tracking
- Contract management

**Curl Commands:**
```bash
# Get client projects
curl -X GET "http://localhost:3000/v1/client/projects?status=active&page=1" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "projects": [
      {
        "id": "proj-client-123",
        "title": "E-commerce Website Development",
        "description": "Modern e-commerce platform with payment integration",
        "status": "in_progress",
        "budget": {
          "type": "fixed",
          "amount": 5000,
          "currency": "USD"
        },
        "freelancer": {
          "id": "freelancer-456",
          "firstName": "John",
          "lastName": "Developer",
          "profilePhoto": "https://example.com/photos/john.jpg",
          "rating": 4.8,
          "skills": ["React", "Node.js"]
        },
        "progress": {
          "percentage": 65,
          "milestonesCompleted": 2,
          "totalMilestones": 4
        },
        "timeline": {
          "startDate": "2024-01-01T00:00:00Z",
          "deadline": "2024-02-15T23:59:59Z"
        },
        "proposalsReceived": 15,
        "createdAt": "2023-12-20T10:30:00Z"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 10,
      "total": 5,
      "totalPages": 1
    }
  }
}

# Get project proposals
curl -X GET "http://localhost:3000/v1/projects/{projectId}/proposals" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "proposals": [
      {
        "id": "proposal-789",
        "freelancer": {
          "id": "freelancer-123",
          "firstName": "Sarah",
          "lastName": "Designer",
          "username": "sarah_design",
          "profilePhoto": "https://example.com/photos/sarah.jpg",
          "rating": 4.9,
          "reviewsCount": 67,
          "completedProjects": 45,
          "skills": ["React", "UI/UX", "Figma"],
          "hourlyRate": {
            "amount": 55,
            "currency": "USD"
          }
        },
        "pricing": {
          "amount": 4800,
          "currency": "USD"
        },
        "deliveryDays": 28,
        "coverLetter": "I'm excited to work on your e-commerce project. With over 5 years of experience...",
        "attachments": [
          {
            "id": "file-1",
            "filename": "portfolio.pdf",
            "url": "https://example.com/files/portfolio.pdf"
          }
        ],
        "submittedAt": "2024-01-12T14:30:00Z",
        "status": "submitted"
      }
    ],
    "summary": {
      "total": 15,
      "submitted": 12,
      "shortlisted": 2,
      "rejected": 1
    }
  }
}

# Accept proposal
curl -X POST "http://localhost:3000/v1/projects/proposals/{proposalId}/accept" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "message": "Proposal accepted successfully",
  "data": {
    "contract": {
      "id": "contract-456",
      "projectId": "proj-123",
      "freelancerId": "freelancer-789",
      "status": "active",
      "budget": {
        "amount": 4800,
        "currency": "USD"
      },
      "timeline": {
        "startDate": "2024-01-15T00:00:00Z",
        "endDate": "2024-02-12T23:59:59Z"
      },
      "milestones": [
        {
          "id": "milestone-1",
          "title": "Design Phase",
          "amount": 1200,
          "dueDate": "2024-01-25T23:59:59Z"
        }
      ],
      "createdAt": "2024-01-15T10:30:00Z"
    }
  }
}

# Approve milestone
curl -X POST "http://localhost:3000/v1/projects/{projectId}/milestones/{milestoneId}/approve" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "message": "Milestone approved and payment released",
  "data": {
    "milestone": {
      "id": "milestone-1",
      "status": "approved",
      "approvedAt": "2024-01-15T10:30:00Z",
      "amount": 1200,
      "payment": {
        "id": "payment-789",
        "status": "released",
        "releasedAt": "2024-01-15T10:30:00Z"
      }
    }
  }
}
```

### 4.4 Find Freelancers
**Prompt:**
Create advanced freelancer discovery system:
- Smart search with filters (skills, rate, location, availability)
- Freelancer comparison tool
- Saved searches and alerts
- Direct invitation system
- Freelancer portfolio review
- Rating and review analysis
- Team building for multiple freelancers

**Curl Commands:**
```bash
# Search freelancers
curl -X GET "http://localhost:3000/v1/freelancers?skills=react,nodejs&minRate=20&maxRate=80&availability=available" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "freelancers": [
      {
        "id": "freelancer-search-1",
        "firstName": "Emma",
        "lastName": "Rodriguez",
        "username": "emma_dev",
        "profilePhoto": "https://example.com/photos/emma.jpg",
        "title": "Full Stack React Developer",
        "bio": "Passionate developer with 6+ years of experience in modern web technologies...",
        "skills": ["React", "Node.js", "TypeScript", "MongoDB"],
        "hourlyRate": {
          "amount": 65,
          "currency": "USD"
        },
        "rating": 4.9,
        "reviewsCount": 134,
        "completedProjects": 89,
        "location": {
          "city": "Barcelona",
          "country": "Spain"
        },
        "availability": "available",
        "verified": true,
        "memberSince": "2021-08-15T00:00:00Z",
        "portfolio": [
          {
            "id": "portfolio-1",
            "title": "SaaS Dashboard",
            "image": "https://example.com/portfolio/dashboard.jpg"
          }
        ],
        "matchScore": 95
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 47,
      "totalPages": 3
    },
    "filters": {
      "applied": {
        "skills": ["react", "nodejs"],
        "minRate": 20,
        "maxRate": 80,
        "availability": "available"
      }
    }
  }
}

# Invite freelancer to project
curl -X POST "http://localhost:3000/v1/projects/{projectId}/invite" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "freelancerId": "freelancer_id",
    "message": "I would like to invite you to work on this project..."
  }'

# Response:
{
  "success": true,
  "message": "Invitation sent successfully",
  "data": {
    "invitation": {
      "id": "invite-123",
      "projectId": "proj-456",
      "freelancerId": "freelancer-789",
      "message": "I would like to invite you to work on this project...",
      "status": "sent",
      "sentAt": "2024-01-15T10:30:00Z",
      "expiresAt": "2024-01-22T10:30:00Z"
    }
  }
}

# Save freelancer to favorites
curl -X POST "http://localhost:3000/v1/client/favorites/freelancers" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "freelancerId": "freelancer_id"
  }'

# Response:
{
  "success": true,
  "message": "Freelancer added to favorites",
  "data": {
    "favorite": {
      "id": "favorite-456",
      "freelancerId": "freelancer-789",
      "addedAt": "2024-01-15T10:30:00Z"
    }
  }
}
```

### 4.5 Payment Management
**Prompt:**
Create payment management system for clients:
- Payment dashboard with pending and completed payments
- Escrow account management
- Invoice generation and tracking
- Payment method management
- Dispute resolution interface
- Payment history and analytics
- Automatic payment setup

**Curl Commands:**
```bash
# Create payment intent
curl -X POST "http://localhost:3000/v1/payments/intent" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "contractId": "contract_id",
    "amount": 2500,
    "currency": "USD",
    "description": "Payment for website development"
  }'

# Response:
{
  "success": true,
  "message": "Payment intent created successfully",
  "data": {
    "paymentIntent": {
      "id": "pi_1234567890",
      "clientSecret": "pi_1234567890_secret_abcdef",
      "amount": 2500,
      "currency": "USD",
      "status": "requires_payment_method",
      "contractId": "contract_id",
      "description": "Payment for website development",
      "createdAt": "2024-01-15T10:30:00Z",
      "fees": {
        "platformFee": 125,
        "processingFee": 75,
        "total": 200
      }
    }
  }
}

# Get payment history
curl -X GET "http://localhost:3000/v1/client/payments?page=1&limit=20" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "payments": [
      {
        "id": "payment-client-1",
        "project": {
          "id": "proj-123",
          "title": "E-commerce Website"
        },
        "freelancer": {
          "id": "freelancer-456",
          "name": "John Developer"
        },
        "amount": 2500,
        "currency": "USD",
        "type": "milestone",
        "status": "completed",
        "description": "Milestone 2 payment",
        "paidAt": "2024-01-10T14:30:00Z",
        "fees": {
          "platformFee": 125,
          "processingFee": 75,
          "total": 200
        },
        "paymentMethod": {
          "type": "card",
          "last4": "4242",
          "brand": "visa"
        }
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 12,
      "totalPages": 1
    },
    "summary": {
      "totalPaid": 15750,
      "pendingPayments": 3200,
      "totalFees": 945
    }
  }
}

# Process milestone payment
curl -X POST "http://localhost:3000/v1/payments/milestone" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "milestoneId": "milestone_id",
    "amount": 1250
  }'

# Response:
{
  "success": true,
  "message": "Milestone payment processed successfully",
  "data": {
    "payment": {
      "id": "payment-milestone-789",
      "milestoneId": "milestone_id",
      "amount": 1250,
      "currency": "USD",
      "status": "completed",
      "paidAt": "2024-01-15T10:30:00Z",
      "escrowReleased": true,
      "fees": {
        "platformFee": 62.5,
        "processingFee": 37.5,
        "total": 100
      }
    }
  }
}
```

---

## 5. SHARED USER FEATURES

### 5.1 Messaging System
**Prompt:**
Create real-time messaging interface:
- Chat list with recent conversations
- Real-time messaging with WebSocket support
- File sharing and attachments
- Message search and filtering
- Online status indicators
- Message reactions and threading
- Video call integration
- Message encryption indicators

**Curl Commands:**
```bash
# Send message
curl -X POST "http://localhost:3000/v1/messaging/messages" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "receiverId": "user_id",
    "content": "Hello, I wanted to discuss the project requirements...",
    "type": "text"
  }'

# Response:
{
  "success": true,
  "message": "Message sent successfully",
  "data": {
    "message": {
      "id": "msg-789",
      "senderId": "user-123",
      "receiverId": "user-456",
      "content": "Hello, I wanted to discuss the project requirements...",
      "type": "text",
      "timestamp": "2024-01-15T10:30:00Z",
      "read": false,
      "conversationId": "conv-123"
    }
  }
}

# Get conversations
curl -X GET "http://localhost:3000/v1/messaging/conversations?page=1&limit=20" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "conversations": [
      {
        "id": "conv-123",
        "participants": [
          {
            "id": "user-123",
            "firstName": "John",
            "lastName": "Doe",
            "profilePhoto": "https://example.com/photos/john.jpg",
            "online": true,
            "lastSeen": "2024-01-15T10:25:00Z"
          },
          {
            "id": "user-456", 
            "firstName": "Jane",
            "lastName": "Smith",
            "profilePhoto": "https://example.com/photos/jane.jpg",
            "online": false,
            "lastSeen": "2024-01-15T09:45:00Z"
          }
        ],
        "lastMessage": {
          "content": "Hello, I wanted to discuss the project requirements...",
          "timestamp": "2024-01-15T10:30:00Z",
          "senderId": "user-123"
        },
        "unreadCount": 2,
        "updatedAt": "2024-01-15T10:30:00Z"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 5,
      "totalPages": 1
    }
  }
}

# Get conversation messages
curl -X GET "http://localhost:3000/v1/messaging/conversations/{conversationId}/messages?page=1" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "messages": [
      {
        "id": "msg-789",
        "senderId": "user-123",
        "receiverId": "user-456",
        "content": "Hello, I wanted to discuss the project requirements...",
        "type": "text",
        "timestamp": "2024-01-15T10:30:00Z",
        "read": false,
        "edited": false
      },
      {
        "id": "msg-788",
        "senderId": "user-456",
        "receiverId": "user-123",
        "content": "Sure, I'm available to discuss. When would be a good time?",
        "type": "text",
        "timestamp": "2024-01-15T09:45:00Z",
        "read": true,
        "edited": false
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 50,
      "total": 15,
      "totalPages": 1
    }
  }
}
```

### 5.2 Notifications Center
**Prompt:**
Create comprehensive notifications system:
- Notification center with categorized notifications
- Real-time notifications with sound/visual alerts
- Notification preferences and settings
- Mark as read/unread functionality
- Notification history and search
- Push notification settings
- Email notification preferences

**Curl Commands:**
```bash
# Get notifications
curl -X GET "http://localhost:3000/v1/notifications?page=1&limit=20&status=unread" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "notifications": [
      {
        "id": "notif-123",
        "type": "proposal_received",
        "title": "New Proposal Received",
        "message": "You received a new proposal for 'E-commerce Website Development'",
        "data": {
          "projectId": "proj-456",
          "proposalId": "proposal-789",
          "freelancerName": "Sarah Developer"
        },
        "read": false,
        "createdAt": "2024-01-15T09:30:00Z",
        "priority": "medium",
        "category": "project"
      },
      {
        "id": "notif-124",
        "type": "milestone_submitted",
        "title": "Milestone Submitted",
        "message": "John Developer submitted milestone 2 for review",
        "data": {
          "projectId": "proj-123",
          "milestoneId": "milestone-2",
          "freelancerName": "John Developer"
        },
        "read": false,
        "createdAt": "2024-01-15T08:15:00Z",
        "priority": "high",
        "category": "project"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 8,
      "totalPages": 1
    },
    "summary": {
      "unread": 8,
      "total": 45
    }
  }
}

# Mark notification as read
curl -X PUT "http://localhost:3000/v1/notifications/{notificationId}/read" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "message": "Notification marked as read",
  "data": {
    "notification": {
      "id": "notif-123",
      "read": true,
      "readAt": "2024-01-15T10:30:00Z"
    }
  }
}

# Update notification preferences
curl -X PUT "http://localhost:3000/v1/notifications/preferences" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "email": {
      "projectUpdates": true,
      "messages": true,
      "payments": true
    },
    "push": {
      "projectUpdates": false,
      "messages": true,
      "payments": true
    }
  }'

# Response:
{
  "success": true,
  "message": "Notification preferences updated successfully",
  "data": {
    "preferences": {
      "email": {
        "projectUpdates": true,
        "messages": true,
        "payments": true,
        "proposals": true,
        "milestones": true
      },
      "push": {
        "projectUpdates": false,
        "messages": true,
        "payments": true,
        "proposals": false,
        "milestones": true
      },
      "updatedAt": "2024-01-15T10:30:00Z"
    }
  }
}
```

### 5.3 Reviews & Ratings
**Prompt:**
Create review and rating system:
- Leave review form with star ratings and comments
- Review display with filtering and sorting
- Response to reviews functionality
- Review analytics and insights
- Review verification badges
- Review request automation
- Dispute resolution for reviews

**Curl Commands:**
```bash
# Create review
curl -X POST "http://localhost:3000/v1/reviews" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "projectId": "project_id",
    "rating": 5,
    "title": "Excellent work!",
    "comment": "The freelancer delivered exceptional work on time...",
    "categories": {
      "communication": 5,
      "quality": 5,
      "timeline": 4
    }
  }'

# Response:
{
  "success": true,
  "message": "Review submitted successfully",
  "data": {
    "review": {
      "id": "review-456",
      "projectId": "project_id",
      "reviewerId": "user-123",
      "revieweeId": "user-789",
      "rating": 5,
      "title": "Excellent work!",
      "comment": "The freelancer delivered exceptional work on time...",
      "categories": {
        "communication": 5,
        "quality": 5,
        "timeline": 4,
        "overall": 4.7
      },
      "createdAt": "2024-01-15T10:30:00Z",
      "verified": true
    }
  }
}

# Get reviews
curl -X GET "http://localhost:3000/v1/reviews?userId=user_id&page=1&limit=10" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "reviews": [
      {
        "id": "review-789",
        "project": {
          "id": "proj-123",
          "title": "E-commerce Website Development"
        },
        "reviewer": {
          "id": "client-456",
          "firstName": "Sarah",
          "lastName": "Johnson",
          "profilePhoto": "https://example.com/photos/sarah.jpg"
        },
        "rating": 5,
        "title": "Outstanding developer!",
        "comment": "John delivered an exceptional website that exceeded our expectations...",
        "categories": {
          "communication": 5,
          "quality": 5,
          "timeline": 4,
          "overall": 4.7
        },
        "createdAt": "2024-01-10T14:20:00Z",
        "verified": true,
        "helpful": 12,
        "response": null
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 10,
      "total": 23,
      "totalPages": 3
    },
    "summary": {
      "averageRating": 4.8,
      "totalReviews": 23,
      "ratingDistribution": {
        "5": 18,
        "4": 4,
        "3": 1,
        "2": 0,
        "1": 0
      }
    }
  }
}

# Respond to review
curl -X POST "http://localhost:3000/v1/reviews/{reviewId}/response" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "response": "Thank you for the kind words! It was a pleasure working with you."
  }'

# Response:
{
  "success": true,
  "message": "Response added successfully",
  "data": {
    "response": {
      "id": "response-123",
      "reviewId": "review-789",
      "response": "Thank you for the kind words! It was a pleasure working with you.",
      "createdAt": "2024-01-15T10:30:00Z"
    }
  }
}
```

### 5.4 File Upload & Management
**Prompt:**
Create file management system:
- Drag-and-drop file upload interface
- File preview for images, documents, videos
- File organization with folders and tags
- File sharing with permission controls
- Version control for files
- File compression and optimization
- Cloud storage integration

**Curl Commands:**
```bash
# Upload single file
curl -X POST "http://localhost:3000/uploads/single" \
  -H "Authorization: Bearer {access_token}" \
  -F "file=@document.pdf" \
  -F "category=project_file"

# Response:
{
  "success": true,
  "message": "File uploaded successfully",
  "data": {
    "file": {
      "id": "file-456",
      "filename": "document_20240115_103045.pdf",
      "originalName": "document.pdf",
      "mimeType": "application/pdf",
      "size": 1024000,
      "category": "project_file",
      "url": "https://example.com/uploads/file-456.pdf",
      "downloadUrl": "https://example.com/uploads/download/file-456",
      "uploadedAt": "2024-01-15T10:30:00Z",
      "uploadedBy": "user-123",
      "virus_scanned": true,
      "public": false
    }
  }
}

# Upload multiple files
curl -X POST "http://localhost:3000/uploads/multiple" \
  -H "Authorization: Bearer {access_token}" \
  -F "files=@image1.jpg" \
  -F "files=@image2.jpg" \
  -F "category=portfolio"

# Response:
{
  "success": true,
  "message": "Files uploaded successfully",
  "data": {
    "files": [
      {
        "id": "file-789",
        "filename": "image1_20240115_103045.jpg",
        "originalName": "image1.jpg",
        "mimeType": "image/jpeg",
        "size": 512000,
        "category": "portfolio",
        "url": "https://example.com/uploads/file-789.jpg",
        "thumbnailUrl": "https://example.com/uploads/thumbnails/file-789.jpg",
        "uploadedAt": "2024-01-15T10:30:00Z"
      },
      {
        "id": "file-790",
        "filename": "image2_20240115_103045.jpg",
        "originalName": "image2.jpg",
        "mimeType": "image/jpeg",
        "size": 768000,
        "category": "portfolio",
        "url": "https://example.com/uploads/file-790.jpg",
        "thumbnailUrl": "https://example.com/uploads/thumbnails/file-790.jpg",
        "uploadedAt": "2024-01-15T10:30:00Z"
      }
    ],
    "summary": {
      "totalUploaded": 2,
      "totalSize": 1280000,
      "failed": 0
    }
  }
}

# Get user files
curl -X GET "http://localhost:3000/uploads/user-files?category=project_file&page=1" \
  -H "Authorization: Bearer {access_token}"

# Response:
{
  "success": true,
  "data": {
    "files": [
      {
        "id": "file-456",
        "filename": "document_20240115_103045.pdf",
        "originalName": "document.pdf",
        "mimeType": "application/pdf",
        "size": 1024000,
        "category": "project_file",
        "url": "https://example.com/uploads/file-456.pdf",
        "uploadedAt": "2024-01-15T10:30:00Z",
        "downloads": 3,
        "shared": false
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 15,
      "totalPages": 1
    },
    "summary": {
      "totalFiles": 15,
      "totalSize": 25600000,
      "categories": {
        "project_file": 8,
        "portfolio": 5,
        "profile": 2
      }
    }
  }
}
```

### 5.5 Settings & Preferences
**Prompt:**
Create comprehensive settings management:
- Account settings (profile, password, email)
- Privacy settings and data controls
- Notification preferences
- Payment methods and billing
- Security settings (2FA, login sessions)
- Theme and appearance preferences
- Language and localization
- Account deletion and data export

**Curl Commands:**
```bash
# Update profile settings
curl -X PUT "http://localhost:3000/v1/auth/profile" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "firstName": "John",
    "lastName": "Doe",
    "phone": "+94701234567",
    "location": {
      "country": "Sri Lanka",
      "city": "Colombo"
    }
  }'

# Response:
{
  "success": true,
  "message": "Profile updated successfully",
  "data": {
    "user": {
      "id": "user-123",
      "firstName": "John",
      "lastName": "Doe",
      "phone": "+94701234567",
      "location": {
        "country": "Sri Lanka",
        "city": "Colombo"
      },
      "updatedAt": "2024-01-15T10:30:00Z",
      "profileComplete": 85
    }
  }
}

# Change password
curl -X PUT "http://localhost:3000/v1/auth/change-password" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "currentPassword": "oldPassword123!",
    "newPassword": "newPassword123!"
  }'

# Response:
{
  "success": true,
  "message": "Password changed successfully",
  "data": {
    "passwordChanged": true,
    "changedAt": "2024-01-15T10:30:00Z",
    "requiresRelogin": false
  }
}

# Update privacy settings
curl -X PUT "http://localhost:3000/v1/auth/privacy" \
  -H "Authorization: Bearer {access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "profileVisibility": "public",
    "showLocation": true,
    "showContactInfo": false
  }'

# Response:
{
  "success": true,
  "message": "Privacy settings updated successfully",
  "data": {
    "privacySettings": {
      "profileVisibility": "public",
      "showLocation": true,
      "showContactInfo": false,
      "showLastSeen": true,
      "allowDirectMessages": true,
      "showEarnings": false,
      "showCompletedProjects": true,
      "updatedAt": "2024-01-15T10:30:00Z"
    }
  }
}
```

---

## 6. ADMIN PANEL

### 6.1 Admin Dashboard
**Prompt:**
Create comprehensive admin dashboard:
- Platform overview with key metrics
- Real-time statistics (users, projects, revenue)
- Recent activity feed
- System health monitoring
- Quick action buttons for common tasks
- Revenue analytics with charts
- User growth metrics
- Alert system for important events

**Curl Commands:**
```bash
# Get admin dashboard stats
curl -X GET "http://localhost:3000/admin/dashboard/stats" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "overview": {
      "totalUsers": 25430,
      "totalFreelancers": 15280,
      "totalClients": 10150,
      "activeProjects": 1250,
      "completedProjects": 8970,
      "totalRevenue": 2450000,
      "monthlyRevenue": 245000,
      "platformFees": 147000
    },
    "growth": {
      "userGrowth": 12.5,
      "revenueGrowth": 8.3,
      "projectGrowth": 15.7
    },
    "recentActivity": [
      {
        "type": "user_registration",
        "message": "New freelancer registered: Sarah Developer",
        "timestamp": "2024-01-15T10:25:00Z"
      },
      {
        "type": "project_completed",
        "message": "Project 'E-commerce Website' completed successfully",
        "timestamp": "2024-01-15T09:45:00Z"
      }
    ],
    "systemHealth": {
      "status": "healthy",
      "uptime": "99.98%",
      "responseTime": "120ms",
      "errorRate": "0.02%"
    }
  }
}

# Get platform analytics
curl -X GET "http://localhost:3000/admin/analytics?period=monthly&year=2024" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "revenue": {
      "monthly": [
        {
          "month": "2024-01",
          "revenue": 245000,
          "fees": 14700,
          "transactions": 1250
        }
      ],
      "total": 2450000,
      "growth": 8.3
    },
    "users": {
      "registrations": [
        {
          "month": "2024-01",
          "freelancers": 850,
          "clients": 420,
          "total": 1270
        }
      ],
      "activeUsers": 18750,
      "retentionRate": 78.5
    },
    "projects": {
      "created": 2340,
      "completed": 1890,
      "successRate": 94.2,
      "averageValue": 2750
    }
  }
}

# Get system health
curl -X GET "http://localhost:3000/admin/system/health" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "status": "healthy",
    "uptime": "99.98%",
    "responseTime": {
      "average": "120ms",
      "p95": "250ms",
      "p99": "450ms"
    },
    "errorRate": "0.02%",
    "services": {
      "database": {
        "status": "healthy",
        "responseTime": "15ms",
        "connections": "45/100"
      },
      "cache": {
        "status": "healthy",
        "hitRate": "94.5%",
        "memory": "2.1GB/4GB"
      },
      "storage": {
        "status": "healthy",
        "usage": "67%",
        "available": "1.2TB"
      }
    }
  }
}
```

### 6.2 User Management
**Prompt:**
Create user management interface:
- User list with search and filtering
- User profile details and activity
- Account status management (active, suspended, banned)
- User verification and KYC management
- User communication tools
- Bulk operations for user management
- User analytics and insights

**Curl Commands:**
```bash
# Get users list
curl -X GET "http://localhost:3000/admin/users?page=1&limit=20&role=freelancer&status=active" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "users": [
      {
        "id": "user-admin-1",
        "email": "john.developer@example.com",
        "username": "johndev",
        "firstName": "John",
        "lastName": "Developer",
        "primaryRole": "freelancer",
        "status": "active",
        "verified": true,
        "memberSince": "2023-06-15T00:00:00Z",
        "lastActive": "2024-01-15T09:30:00Z",
        "profileComplete": 95,
        "completedProjects": 67,
        "rating": 4.8,
        "totalEarnings": 45750,
        "location": {
          "country": "Sri Lanka",
          "city": "Colombo"
        }
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 15280,
      "totalPages": 764
    },
    "summary": {
      "active": 14850,
      "suspended": 320,
      "banned": 110,
      "pending": 0
    }
  }
}

# Get user details
curl -X GET "http://localhost:3000/admin/users/{userId}" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "user": {
      "id": "user-123",
      "email": "john.developer@example.com",
      "username": "johndev",
      "firstName": "John",
      "lastName": "Developer",
      "primaryRole": "freelancer",
      "status": "active",
      "verified": true,
      "memberSince": "2023-06-15T00:00:00Z",
      "lastActive": "2024-01-15T09:30:00Z",
      "activityLog": [
        {
          "action": "project_completed",
          "details": "Completed 'E-commerce Website' project",
          "timestamp": "2024-01-14T16:30:00Z"
        }
      ],
      "statistics": {
        "completedProjects": 67,
        "activeProjects": 3,
        "totalEarnings": 45750,
        "rating": 4.8,
        "reviewsCount": 58
      },
      "flags": [],
      "warnings": 0
    }
  }
}

# Update user status
curl -X PUT "http://localhost:3000/admin/users/{userId}/status" \
  -H "Authorization: Bearer {admin_access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "status": "suspended",
    "reason": "Policy violation"
  }'

# Response:
{
  "success": true,
  "message": "User status updated successfully",
  "data": {
    "user": {
      "id": "user-123",
      "status": "suspended",
      "statusChangedAt": "2024-01-15T10:30:00Z",
      "reason": "Policy violation",
      "changedBy": "admin-456"
    }
  }
}
```

### 6.3 Project Management
**Prompt:**
Create admin project oversight:
- Project monitoring dashboard
- Project approval workflow
- Dispute resolution center
- Project analytics and reporting
- Quality control and flagging system
- Project category management
- Featured projects management

**Curl Commands:**
```bash
# Get projects for admin review
curl -X GET "http://localhost:3000/admin/projects?status=pending&page=1" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "projects": [
      {
        "id": "proj-admin-1",
        "title": "Cryptocurrency Trading Platform",
        "description": "Looking to build a secure crypto trading platform...",
        "client": {
          "id": "client-123",
          "name": "Crypto Startup Inc.",
          "memberSince": "2024-01-01T00:00:00Z",
          "verified": false
        },
        "category": "web-development",
        "budget": {
          "amount": 25000,
          "currency": "USD"
        },
        "status": "pending_review",
        "flagged": true,
        "flagReasons": ["high_budget", "crypto_related"],
        "submittedAt": "2024-01-15T08:30:00Z",
        "reviewDeadline": "2024-01-17T23:59:59Z"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 20,
      "total": 15,
      "totalPages": 1
    }
  }
}

# Approve/reject project
curl -X PUT "http://localhost:3000/admin/projects/{projectId}/status" \
  -H "Authorization: Bearer {admin_access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "status": "approved",
    "notes": "Project meets platform guidelines"
  }'

# Response:
{
  "success": true,
  "message": "Project status updated successfully",
  "data": {
    "project": {
      "id": "proj-123",
      "status": "approved",
      "reviewedAt": "2024-01-15T10:30:00Z",
      "reviewedBy": "admin-456",
      "notes": "Project meets platform guidelines"
    }
  }
}

# Handle dispute
curl -X POST "http://localhost:3000/admin/disputes/{disputeId}/resolve" \
  -H "Authorization: Bearer {admin_access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "resolution": "favor_client",
    "notes": "Evidence supports client claim"
  }'

# Response:
{
  "success": true,
  "message": "Dispute resolved successfully",
  "data": {
    "dispute": {
      "id": "dispute-789",
      "resolution": "favor_client",
      "resolvedAt": "2024-01-15T10:30:00Z",
      "resolvedBy": "admin-456",
      "notes": "Evidence supports client claim",
      "refundAmount": 2500,
      "finalStatus": "closed"
    }
  }
}
```

### 6.4 Financial Management
**Prompt:**
Create financial oversight dashboard:
- Revenue tracking and analytics
- Transaction monitoring
- Payment processing oversight
- Fee and commission management
- Payout approval system
- Financial reporting tools
- Fraud detection and prevention

**Curl Commands:**
```bash
# Get financial overview
curl -X GET "http://localhost:3000/admin/finance/overview?period=monthly" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "revenue": {
      "total": 2450000,
      "thisMonth": 245000,
      "lastMonth": 225000,
      "growth": 8.9,
      "currency": "USD"
    },
    "fees": {
      "platformFees": 147000,
      "processingFees": 49000,
      "total": 196000,
      "percentage": 8.0
    },
    "payouts": {
      "pending": 125000,
      "processed": 2254000,
      "failed": 1200
    },
    "escrow": {
      "held": 340000,
      "released": 1980000
    },
    "transactions": {
      "total": 8450,
      "successful": 8389,
      "failed": 61,
      "successRate": 99.3
    }
  }
}

# Get transaction details
curl -X GET "http://localhost:3000/admin/finance/transactions?page=1&limit=50" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "data": {
    "transactions": [
      {
        "id": "txn-admin-1",
        "type": "milestone_payment",
        "amount": 2500,
        "currency": "USD",
        "status": "completed",
        "client": {
          "id": "client-123",
          "name": "Tech Startup Inc."
        },
        "freelancer": {
          "id": "freelancer-456",
          "name": "John Developer"
        },
        "project": {
          "id": "proj-789",
          "title": "E-commerce Website"
        },
        "fees": {
          "platformFee": 125,
          "processingFee": 75
        },
        "processedAt": "2024-01-15T10:30:00Z",
        "paymentMethod": "stripe"
      }
    ],
    "pagination": {
      "page": 1,
      "limit": 50,
      "total": 8450,
      "totalPages": 169
    }
  }
}

# Approve payout
curl -X PUT "http://localhost:3000/admin/finance/payouts/{payoutId}/approve" \
  -H "Authorization: Bearer {admin_access_token}"

# Response:
{
  "success": true,
  "message": "Payout approved successfully",
  "data": {
    "payout": {
      "id": "payout-789",
      "status": "approved",
      "approvedAt": "2024-01-15T10:30:00Z",
      "approvedBy": "admin-456",
      "amount": 1500,
      "estimatedProcessing": "2-3 business days"
    }
  }
}
```

### 6.5 Content Management
**Prompt:**
Create content management system:
- Platform content editing (terms, policies, help)
- Category and skill management
- Featured content management
- SEO content optimization
- Multilingual content support
- Content approval workflow
- Blog and news management

**Curl Commands:**
```bash
# Update platform content
curl -X PUT "http://localhost:3000/admin/content/terms-of-service" \
  -H "Authorization: Bearer {admin_access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "content": "Updated terms of service content...",
    "version": "2.1"
  }'

# Response:
{
  "success": true,
  "message": "Content updated successfully",
  "data": {
    "content": {
      "id": "content-tos",
      "type": "terms-of-service",
      "content": "Updated terms of service content...",
      "version": "2.1",
      "updatedAt": "2024-01-15T10:30:00Z",
      "updatedBy": "admin-456",
      "status": "published"
    }
  }
}

# Manage categories
curl -X POST "http://localhost:3000/admin/categories" \
  -H "Authorization: Bearer {admin_access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "AI/Machine Learning",
    "description": "Projects related to AI and ML",
    "icon": "brain",
    "featured": true
  }'

# Response:
{
  "success": true,
  "message": "Category created successfully",
  "data": {
    "category": {
      "id": "cat-ai-ml",
      "name": "AI/Machine Learning",
      "slug": "ai-machine-learning",
      "description": "Projects related to AI and ML",
      "icon": "brain",
      "featured": true,
      "projectCount": 0,
      "createdAt": "2024-01-15T10:30:00Z",
      "status": "active"
    }
  }
}

# Manage skills
curl -X POST "http://localhost:3000/admin/skills" \
  -H "Authorization: Bearer {admin_access_token}" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Python",
    "category": "programming",
    "popularity": 95
  }'

# Response:
{
  "success": true,
  "message": "Skill created successfully",
  "data": {
    "skill": {
      "id": "skill-python",
      "name": "Python",
      "slug": "python",
      "category": "programming",
      "popularity": 95,
      "freelancerCount": 0,
      "projectCount": 0,
      "createdAt": "2024-01-15T10:30:00Z",
      "status": "active"
    }
  }
}
```

---

## 7. ADDITIONAL FEATURES

### 7.1 Help & Support Center
**Prompt:**
Create comprehensive help system:
- FAQ section with search functionality
- Help articles with categories
- Contact support form
- Live chat integration
- Video tutorials and guides
- Community forum
- Knowledge base with voting system

### 7.2 Mobile App Interfaces
**Prompt:**
Create mobile-responsive versions of all above interfaces with:
- Touch-optimized navigation
- Mobile-specific interactions
- Offline capability where applicable
- Push notifications
- Camera integration for file uploads
- Mobile payment integration

### 7.3 Advanced Analytics Dashboard
**Prompt:**
Create analytics interfaces for users:
- Performance metrics and insights
- Revenue/earnings analytics
- Profile view analytics
- Project success metrics
- Comparative analytics with platform averages
- Goal setting and tracking

---

## Implementation Guidelines

### Design System Requirements:
- Use consistent color scheme and typography
- Implement dark/light theme support
- Ensure accessibility (WCAG 2.1 AA compliance)
- Mobile-first responsive design
- Loading states and skeleton screens
- Error handling with user-friendly messages
- Form validation with real-time feedback

### Technical Requirements:
- React/Next.js with TypeScript
- Tailwind CSS for styling
- React Query for API state management
- Socket.io for real-time features
- React Hook Form for form handling
- Chart.js/Recharts for analytics
- React Router for navigation

### Security Considerations:
- Input sanitization and validation
- XSS protection
- CSRF protection
- Secure file upload handling
- Rate limiting on forms
- Secure authentication token handling

### Performance Optimization:
- Code splitting and lazy loading
- Image optimization
- Caching strategies
- Bundle size optimization
- SEO optimization
- Core Web Vitals optimization

---

## API Base URL Configuration
Replace `http://localhost:3000` with your production API URL when deploying. All endpoints assume this base URL structure.

## Authentication Header
Most authenticated endpoints require the Authorization header:
```
Authorization: Bearer {access_token}
```

Replace `{access_token}` with the actual JWT token received from login.

## API Response Format Standards

### Success Response Format
All successful API responses follow this structure:
```json
{
  "success": true,
  "message": "Optional success message",
  "data": {
    // Response data object or array
  },
  "pagination": {
    // Only included for paginated responses
    "page": 1,
    "limit": 20,
    "total": 100,
    "totalPages": 5
  },
  "meta": {
    // Optional metadata
  }
}
```

### Error Response Format
All error responses follow this structure:
```json
{
  "success": false,
  "error": {
    "code": "ERROR_CODE",
    "message": "Human readable error message",
    "details": "Additional error details if available"
  },
  "statusCode": 400
}
```

### Common HTTP Status Codes
- `200` - Success
- `201` - Created
- `400` - Bad Request (validation errors)
- `401` - Unauthorized (authentication required)
- `403` - Forbidden (insufficient permissions)
- `404` - Not Found
- `429` - Too Many Requests (rate limiting)
- `500` - Internal Server Error

### Pagination Parameters
For endpoints that support pagination:
- `page` - Page number (starts from 1)
- `limit` - Number of items per page (default: 20, max: 100)
- `sort` - Sort field (e.g., 'createdAt', 'title')
- `order` - Sort order ('asc' or 'desc')

### Date Format
All dates are returned in ISO 8601 format: `2024-01-15T10:30:00Z`

### Currency Format
All monetary values include currency specification:
```json
{
  "amount": 1500,
  "currency": "USD"
}
```

### File Upload Responses
File upload endpoints return file metadata:
```json
{
  "success": true,
  "data": {
    "file": {
      "id": "file-123",
      "filename": "document.pdf",
      "originalName": "project-proposal.pdf",
      "mimeType": "application/pdf",
      "size": 1024000,
      "url": "https://example.com/uploads/file-123.pdf",
      "uploadedAt": "2024-01-15T10:30:00Z"
    }
  }
}
```

---

*This document provides comprehensive UI development prompts for a complete freelance platform. Each section includes detailed requirements, design considerations, corresponding backend API integration commands, and expected response formats for seamless frontend implementation.*